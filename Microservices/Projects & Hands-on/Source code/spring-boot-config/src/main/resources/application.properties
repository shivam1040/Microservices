spring.application.name=spring-boot-config
app.name=a
#if no app.name is present then default value 123 will be used, part of Spring EL language
app.description=${app.name:123}
list.values=1, 2, 3
dbValues={a:'b', c:'d'}
db.name=a

#important for enabling actuator endpoints
management.endpoints.web.exposure.include=*

#way to use test profile, naming convention is application-profileName.properties
#to do the same from cmd use, java -jar application.jar --spring.profiles.active=test

#spring.profiles.active: test

#this will get the configuration from a remote location as defined in cloud config service
#if one wants to specify different config files for different service in config git repo then specify the config filename as springapplicationName.properties in git repo, this way config server will give prepeference to microservice name config at the time of request is made from config client for configuration files
spring.config.import=configserver:http://localhost:8888


#a={cipher}123, spring cloud config will encrypt this property using JCE(java cryptography extension) whenever the property is transferred or accedded by service and decrypt only when it is reached on the config client end, use this convention in files at git side
